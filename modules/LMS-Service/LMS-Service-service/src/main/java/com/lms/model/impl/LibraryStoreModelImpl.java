/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.lms.model.LibraryStore;
import com.lms.model.LibraryStoreModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LibraryStore service. Represents a row in the &quot;LMS_LibraryStore&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LibraryStoreModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LibraryStoreImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LibraryStoreImpl
 * @generated
 */
public class LibraryStoreModelImpl
	extends BaseModelImpl<LibraryStore> implements LibraryStoreModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a library store model instance should use the <code>LibraryStore</code> interface instead.
	 */
	public static final String TABLE_NAME = "LMS_LibraryStore";

	public static final Object[][] TABLE_COLUMNS = {
		{"lmsID", Types.BIGINT}, {"bookname", Types.VARCHAR},
		{"issueDate", Types.VARCHAR}, {"uploadedBy", Types.VARCHAR},
		{"issueTo", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"comapnyId", Types.BIGINT}, {"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lmsID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bookname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("comapnyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LMS_LibraryStore (lmsID LONG not null primary key,bookname VARCHAR(75) null,issueDate VARCHAR(75) null,uploadedBy VARCHAR(75) null,issueTo VARCHAR(75) null,groupId LONG,comapnyId LONG,userId LONG)";

	public static final String TABLE_SQL_DROP = "drop table LMS_LibraryStore";

	public static final String ORDER_BY_JPQL =
		" ORDER BY libraryStore.issueDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LMS_LibraryStore.issueDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long BOOKNAME_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long ISSUEDATE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public LibraryStoreModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lmsID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLmsID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lmsID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LibraryStore.class;
	}

	@Override
	public String getModelClassName() {
		return LibraryStore.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LibraryStore, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LibraryStore, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LibraryStore, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LibraryStore)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LibraryStore, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LibraryStore, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LibraryStore)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LibraryStore, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LibraryStore, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LibraryStore>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LibraryStore.class.getClassLoader(), LibraryStore.class,
			ModelWrapper.class);

		try {
			Constructor<LibraryStore> constructor =
				(Constructor<LibraryStore>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LibraryStore, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LibraryStore, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LibraryStore, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LibraryStore, Object>>();
		Map<String, BiConsumer<LibraryStore, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LibraryStore, ?>>();

		attributeGetterFunctions.put("lmsID", LibraryStore::getLmsID);
		attributeSetterBiConsumers.put(
			"lmsID", (BiConsumer<LibraryStore, Long>)LibraryStore::setLmsID);
		attributeGetterFunctions.put("bookname", LibraryStore::getBookname);
		attributeSetterBiConsumers.put(
			"bookname",
			(BiConsumer<LibraryStore, String>)LibraryStore::setBookname);
		attributeGetterFunctions.put("issueDate", LibraryStore::getIssueDate);
		attributeSetterBiConsumers.put(
			"issueDate",
			(BiConsumer<LibraryStore, String>)LibraryStore::setIssueDate);
		attributeGetterFunctions.put("uploadedBy", LibraryStore::getUploadedBy);
		attributeSetterBiConsumers.put(
			"uploadedBy",
			(BiConsumer<LibraryStore, String>)LibraryStore::setUploadedBy);
		attributeGetterFunctions.put("issueTo", LibraryStore::getIssueTo);
		attributeSetterBiConsumers.put(
			"issueTo",
			(BiConsumer<LibraryStore, String>)LibraryStore::setIssueTo);
		attributeGetterFunctions.put("groupId", LibraryStore::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LibraryStore, Long>)LibraryStore::setGroupId);
		attributeGetterFunctions.put("comapnyId", LibraryStore::getComapnyId);
		attributeSetterBiConsumers.put(
			"comapnyId",
			(BiConsumer<LibraryStore, Long>)LibraryStore::setComapnyId);
		attributeGetterFunctions.put("userId", LibraryStore::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<LibraryStore, Long>)LibraryStore::setUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getLmsID() {
		return _lmsID;
	}

	@Override
	public void setLmsID(long lmsID) {
		_lmsID = lmsID;
	}

	@Override
	public String getBookname() {
		if (_bookname == null) {
			return "";
		}
		else {
			return _bookname;
		}
	}

	@Override
	public void setBookname(String bookname) {
		_columnBitmask |= BOOKNAME_COLUMN_BITMASK;

		if (_originalBookname == null) {
			_originalBookname = _bookname;
		}

		_bookname = bookname;
	}

	public String getOriginalBookname() {
		return GetterUtil.getString(_originalBookname);
	}

	@Override
	public String getIssueDate() {
		if (_issueDate == null) {
			return "";
		}
		else {
			return _issueDate;
		}
	}

	@Override
	public void setIssueDate(String issueDate) {
		_columnBitmask = -1L;

		if (_originalIssueDate == null) {
			_originalIssueDate = _issueDate;
		}

		_issueDate = issueDate;
	}

	public String getOriginalIssueDate() {
		return GetterUtil.getString(_originalIssueDate);
	}

	@Override
	public String getUploadedBy() {
		if (_uploadedBy == null) {
			return "";
		}
		else {
			return _uploadedBy;
		}
	}

	@Override
	public void setUploadedBy(String uploadedBy) {
		_uploadedBy = uploadedBy;
	}

	@Override
	public String getIssueTo() {
		if (_issueTo == null) {
			return "";
		}
		else {
			return _issueTo;
		}
	}

	@Override
	public void setIssueTo(String issueTo) {
		_issueTo = issueTo;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getComapnyId() {
		return _comapnyId;
	}

	@Override
	public void setComapnyId(long comapnyId) {
		_comapnyId = comapnyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, LibraryStore.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LibraryStore toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LibraryStore>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LibraryStoreImpl libraryStoreImpl = new LibraryStoreImpl();

		libraryStoreImpl.setLmsID(getLmsID());
		libraryStoreImpl.setBookname(getBookname());
		libraryStoreImpl.setIssueDate(getIssueDate());
		libraryStoreImpl.setUploadedBy(getUploadedBy());
		libraryStoreImpl.setIssueTo(getIssueTo());
		libraryStoreImpl.setGroupId(getGroupId());
		libraryStoreImpl.setComapnyId(getComapnyId());
		libraryStoreImpl.setUserId(getUserId());

		libraryStoreImpl.resetOriginalValues();

		return libraryStoreImpl;
	}

	@Override
	public int compareTo(LibraryStore libraryStore) {
		int value = 0;

		value = getIssueDate().compareTo(libraryStore.getIssueDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LibraryStore)) {
			return false;
		}

		LibraryStore libraryStore = (LibraryStore)object;

		long primaryKey = libraryStore.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LibraryStoreModelImpl libraryStoreModelImpl = this;

		libraryStoreModelImpl._originalBookname =
			libraryStoreModelImpl._bookname;

		libraryStoreModelImpl._originalIssueDate =
			libraryStoreModelImpl._issueDate;

		libraryStoreModelImpl._originalGroupId = libraryStoreModelImpl._groupId;

		libraryStoreModelImpl._setOriginalGroupId = false;

		libraryStoreModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LibraryStore> toCacheModel() {
		LibraryStoreCacheModel libraryStoreCacheModel =
			new LibraryStoreCacheModel();

		libraryStoreCacheModel.lmsID = getLmsID();

		libraryStoreCacheModel.bookname = getBookname();

		String bookname = libraryStoreCacheModel.bookname;

		if ((bookname != null) && (bookname.length() == 0)) {
			libraryStoreCacheModel.bookname = null;
		}

		libraryStoreCacheModel.issueDate = getIssueDate();

		String issueDate = libraryStoreCacheModel.issueDate;

		if ((issueDate != null) && (issueDate.length() == 0)) {
			libraryStoreCacheModel.issueDate = null;
		}

		libraryStoreCacheModel.uploadedBy = getUploadedBy();

		String uploadedBy = libraryStoreCacheModel.uploadedBy;

		if ((uploadedBy != null) && (uploadedBy.length() == 0)) {
			libraryStoreCacheModel.uploadedBy = null;
		}

		libraryStoreCacheModel.issueTo = getIssueTo();

		String issueTo = libraryStoreCacheModel.issueTo;

		if ((issueTo != null) && (issueTo.length() == 0)) {
			libraryStoreCacheModel.issueTo = null;
		}

		libraryStoreCacheModel.groupId = getGroupId();

		libraryStoreCacheModel.comapnyId = getComapnyId();

		libraryStoreCacheModel.userId = getUserId();

		return libraryStoreCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LibraryStore, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LibraryStore, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LibraryStore, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LibraryStore)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LibraryStore, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LibraryStore, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LibraryStore, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LibraryStore)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LibraryStore>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _lmsID;
	private String _bookname;
	private String _originalBookname;
	private String _issueDate;
	private String _originalIssueDate;
	private String _uploadedBy;
	private String _issueTo;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _comapnyId;
	private long _userId;
	private long _columnBitmask;
	private LibraryStore _escapedModel;

}